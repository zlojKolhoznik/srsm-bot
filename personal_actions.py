import asyncio

from aiogram import filters
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

import custom_filters
from constants import TEST_CHAT_ID, TEST_BOT_ID
from dispatcher import dp
from db import BotDB

from fsm import QuestionTypes


def make_row_keyboard(items: list[str]):
    row = [KeyboardButton(text=item) for item in items]
    return ReplyKeyboardMarkup(keyboard=[row], one_time_keyboard=True, resize_keyboard=True)


def make_inline_keyboard(items: dict[str, str], rows: list[int]):
    """
    :param items: Keyboard buttons, key - button text, value - callback data
    :param rows:  Number of buttons in each row
    :return:  InlineKeyboardMarkup
    """

    buttons = [InlineKeyboardButton(text=key, callback_data=value) for key, value in items.items()]
    keyboard = []
    for i in range(len(rows)):
        row = []
        for j in range(rows[i]):
            row.append(buttons[0])
            buttons = buttons[1:]
            if len(buttons) == 0:
                break
        keyboard.append(row)
        if (len(buttons) == 0):
            break
    if len(buttons) > 0:
        keyboard.append(buttons)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


question_types = ['–ï–∫–æ –ù–ê–£ üåé', '–°–† –°–ú ‚úàÔ∏è', '–Ü–Ω—à–µ ‚ÑπÔ∏è']
question_type_keyboard = make_row_keyboard(question_types)
back_to_types = '–ù–∞–∑–∞–¥ –¥–æ —Ç–µ–º ‚¨ÖÔ∏è'
back_to_type_keyboard = make_row_keyboard([back_to_types])


@dp.message(filters.CommandStart())
async def start(message: Message, state: FSMContext):
    db = BotDB('users.db')
    await message.bot.send_message(chat_id=message.chat.id,
                                   text='–ü—Ä–∏–≤—ñ—Ç! üëã \n–¶–µ–π –±–æ—Ç –¥–∞—Å—Ç—å —Ç–æ–±—ñ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è '
                                        '—Ç–≤–æ—ó–π —Å—Ç—É–¥—Ä–∞–¥—ñ! –î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è –±–æ—Ç—É —ñ –º–∏ '
                                        '–≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –π–æ–≥–æ —Å—Ç—É–¥—Ä–∞–¥—ñ',
                                   reply_markup=question_type_keyboard)
    db.insert_user(message.from_user)
    await state.set_state(QuestionTypes.choosing_type)


@dp.message(custom_filters.ChatId(TEST_CHAT_ID), filters.Command('activate'))
async def activate_punkt(message: Message, state: FSMContext):
    db = BotDB('users.db')
    inactive_punkts = db.get_inactive_punkts()
    print(inactive_punkts)
    punkts_elements = dict()
    for punkt in inactive_punkts:
        punkts_elements[punkt[0]] = punkt[0]
    punkts_keyboard = make_inline_keyboard(punkts_elements, [2, 2])
    await message.bot.send_message(chat_id=message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É, –ø—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤ —è–∫–æ–º—É —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π', reply_markup=punkts_keyboard)
    await state.set_state(QuestionTypes.choosing_activating_punkt)


@dp.callback_query(StateFilter(QuestionTypes.choosing_activating_punkt), custom_filters.ChatIdCallback(TEST_CHAT_ID))
async def activate_punkt_callback(query: CallbackQuery, state: FSMContext):
    db = BotDB('users.db')
    punkt = query.data
    db.activate_punkt(punkt)
    await query.message.edit_text(f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É –Ω–æ–º–µ—Ä {punkt} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –¥–æ—Å—Ç—É–ø–Ω–∏–π')
    subscribed_users = db.get_users_subscribed_for(punkt)
    for user_id in subscribed_users:
        await query.message.bot.send_message(chat_id=user_id, text=f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {punkt}, –Ω–∞ —è–∫–∏–π –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ, —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π.\n'
                                             '–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –π–æ–≥–æ —Ä–æ–±–æ—Ç—É. –Ø–∫—â–æ –í–∏ –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –≤–∏–±–µ—Ä—ñ—Ç—å /unsubscribe')
    await state.clear()


@dp.message(custom_filters.ChatId(TEST_CHAT_ID), filters.Command('deactivate'))
async def deactivate_punkt(message: Message, state: FSMContext):
    db = BotDB('users.db')
    active_punkts = db.get_active_punkts()
    punkts_elements = dict()
    for punkt in active_punkts:
        punkts_elements[punkt[0]] = punkt[0]
    punkts_keyboard = make_inline_keyboard(punkts_elements, [2, 2])
    await message.bot.send_message(chat_id=message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É, –≤ —è–∫–æ–º—É –ø—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π', reply_markup=punkts_keyboard)
    await state.set_state(QuestionTypes.choosing_deactivating_punkt)


@dp.callback_query(StateFilter(QuestionTypes.choosing_deactivating_punkt), custom_filters.ChatIdCallback(TEST_CHAT_ID))
async def deactivate_punkt_callback(query: CallbackQuery, state: FSMContext):
    db = BotDB('users.db')
    punkt = query.data
    db.deactivate_punkt(punkt)
    await query.message.edit_text(f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {punkt} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')
    subscribed_users = db.get_users_subscribed_for(punkt)
    for user_id in subscribed_users:
        await query.message.bot.send_message(chat_id=user_id, text=f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {punkt}, –Ω–∞ —è–∫–∏–π –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ, –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. '
                                             '–ú–∏ –í–∞—Å —Å–ø–æ–≤—ñ—Å—Ç–∏–º–æ, —è–∫ —Ç—ñ–ª—å–∫–∏ –ø—É–Ω–∫—Ç –∑–Ω–æ–≤—É —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–º, –∞ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç—å—Å—è.\n' 
                                             '–¢–∏–º —á–∞—Å–æ–º –í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π –ø—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n\n'
                                             '–Ø–∫—â–æ –≤–∏ –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –≤–∏–±–µ—Ä—ñ—Ç—å /unsubscribe')
    await state.clear()


@dp.message(custom_filters.ChatId(TEST_CHAT_ID), filters.Command('open'))
async def open_punkt(message: Message, state: FSMContext):
    dp = BotDB('users.db')
    closed_punkts = dp.get_closed_punkts()
    if len(closed_punkts) == 0:
        await message.bot.send_message(chat_id=message.chat.id, text='–í—Å—ñ –ø—É–Ω–∫—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ')
        return
    punkts_elements = dict()
    for punkt in closed_punkts:
        punkts_elements[punkt[0]] = punkt[0]
    punkts_keyboard = make_inline_keyboard(punkts_elements, [2, 2])
    await message.bot.send_message(chat_id=message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É, –ø—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤ —è–∫–æ–º—É –≤—ñ–¥–∫—Ä–∏–≤—Å—è', reply_markup=punkts_keyboard)
    await state.set_state(QuestionTypes.choosing_opening_punkt)


@dp.callback_query(custom_filters.ChatIdCallback(TEST_CHAT_ID), StateFilter(QuestionTypes.choosing_opening_punkt))
async def open_punkt_callback(query: CallbackQuery, state: FSMContext):
    db = BotDB('users.db')
    subscribed_users = db.get_users_subscribed_for(query.data)
    for user_id in subscribed_users:
        await query.message.bot.send_message(chat_id=user_id, text=f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {query.data}, –Ω–∞ —è–∫–∏–π –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ, –≤—ñ–¥–∫—Ä–∏–≤—Å—è. '
                                             '–ü—Ä–∏—Ö–æ–¥—å—Ç–µ –≥—Ä—ñ—Ç–∏—Å—å —Ç–∞ –∑–∞—Ä—è–¥–∂–∞—Ç–∏—Å—å! üîå\n'
                                             '–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–±–æ—Ç—É —Ü—å–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –Ø–∫—â–æ –í–∏ –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –≤–∏–±–µ—Ä—ñ—Ç—å /unsubscribe')
    db.open_punkt(query.data)
    await query.message.edit_text(f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {query.data} –≤—ñ–¥–∫—Ä–∏—Ç–æ. –í—Å—ñ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ')
    await state.clear()


@dp.message(custom_filters.ChatId(TEST_CHAT_ID), filters.Command('close'))
async def close_punkt(message: Message, state: FSMContext):
    db = BotDB('users.db')
    open_punkts = db.get_open_punkts()
    if len(open_punkts) == 0:
        await message.bot.send_message(chat_id=message.chat.id, text='–í—Å—ñ –ø—É–Ω–∫—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–∞–∫—Ä–∏—Ç—ñ')
        return
    punkts_elements = dict()
    for punkt in open_punkts:
        punkts_elements[punkt[0]] = punkt[0]
    punkts_keyboard = make_inline_keyboard(punkts_elements, [2, 2])
    await message.bot.send_message(chat_id=message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É, –ø—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤ —è–∫–æ–º—É –∑–∞–∫—Ä–∏–≤—Å—è', reply_markup=punkts_keyboard)
    await state.set_state(QuestionTypes.choosing_closing_punkt)


@dp.callback_query(custom_filters.ChatIdCallback(TEST_CHAT_ID), StateFilter(QuestionTypes.choosing_closing_punkt))
async def close_punkt_callback(query: CallbackQuery, state: FSMContext):
    db = BotDB('users.db')
    subscribed_users = db.get_users_subscribed_for(query.data)
    for user_id in subscribed_users:
        await query.message.bot.send_message(chat_id=user_id, text=f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {query.data}, –Ω–∞ —è–∫–∏–π –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ, –∑–∞–∫—Ä–∏–≤—Å—è. üòû\n'
                                             '–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–±–æ—Ç—É —Ü—å–æ–≥–æ –ø—É–Ω–∫—Ç–∞. –Ø–∫—â–æ –í–∏ –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, –≤–∏–±–µ—Ä—ñ—Ç—å /unsubscribe')
    db.close_punkt(query.data)
    await query.message.edit_text(f'–ü—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {query.data} –∑–∞–∫—Ä–∏—Ç–æ. –í—Å—ñ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ')
    await state.clear()


@dp.message(custom_filters.PrivateChat(), filters.Command('close'))
async def no_access_to_close_punkt(message: Message):
    await message.bot.send_message(chat_id=message.chat.id, text='–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')


@dp.message(custom_filters.PrivateChat(), filters.Command('open'))
async def no_access_to_open_punkt(message: Message):
    await message.bot.send_message(chat_id=message.chat.id, text='–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')


@dp.message(custom_filters.PrivateChat(), filters.Command('activate'))
async def no_access_to_activate_punkt(message: Message):
    await message.bot.send_message(chat_id=message.chat.id, text='–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')


@dp.message(custom_filters.PrivateChat(), filters.Command('deactivate'))
async def no_access_to_deactivate_punkt(message: Message):
    await message.bot.send_message(chat_id=message.chat.id, text='–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')


@dp.message(custom_filters.PrivateChat(), filters.Command('subscribe'))
async def subscribe(message: Message, state: FSMContext):
    db = BotDB('users.db')
    punkts = db.get_active_punkts()
    puntks_with_subscription = db.get_user_subscriptions(message.from_user.id)
    punkts_elements = dict()
    for punkt in punkts:
        if (punkt[0] not in puntks_with_subscription):
            punkts_elements[punkt[0]] = punkt[0]
    punkts_keyboard = make_inline_keyboard(punkts_elements, [2, 2])
    await message.bot.send_message(chat_id=message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É, –Ω–∞ —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å', reply_markup=punkts_keyboard)
    await state.set_state(QuestionTypes.choosing_subscribing_punkt)


@dp.callback_query(StateFilter(QuestionTypes.choosing_subscribing_punkt), custom_filters.PrivateChatCallback())
async def subscribe_callback(query: CallbackQuery, state: FSMContext):
    db = BotDB('users.db')
    punkt = query.data
    db.subscribe_user_to_punkt(query.from_user.id, punkt)
    await query.message.edit_text(f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—É–Ω–∫—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {punkt}. –©–æ–± –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –≤–∏–±–µ—Ä—ñ—Ç—å /unsubscribe')
    await state.clear()
    await state.set_state(QuestionTypes.choosing_type)


@dp.message(custom_filters.PrivateChat(), filters.Command('unsubscribe'))
async def unsubscribe(message: Message, state: FSMContext):
    db = BotDB('users.db')
    punkts = db.get_user_subscriptions(message.from_user.id)
    punkts_elements = dict()
    for punkt in punkts:
        punkts_elements[punkt] = punkt
    punkts_keyboard = make_inline_keyboard(punkts_elements, [2, 2])
    await message.bot.send_message(chat_id=message.chat.id, text='–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É, –≤—ñ–¥ –ø—É–Ω–∫—Ç—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É —É —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å', reply_markup=punkts_keyboard)
    await state.set_state(QuestionTypes.choosing_unsubscribing_punkt)


@dp.callback_query(QuestionTypes.choosing_unsubscribing_punkt, custom_filters.PrivateChatCallback())
async def unsubscribe_callback(query: CallbackQuery, state: FSMContext):
    db = BotDB('users.db')
    punkt = query.data
    db.unsubscribe_user_from_punkt(query.from_user.id, punkt)
    await query.message.edit_text(f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –≤—ñ–¥ –ø—É–Ω–∫—Ç—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É {punkt}. –©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —ñ–Ω—à–∏–π –ø—É–Ω–∫—Ç, –≤–∏–±–µ—Ä—ñ—Ç—å /subscribe')
    await state.clear()
    await state.set_state(QuestionTypes.choosing_type)


@dp.message(custom_filters.PrivateChat(), StateFilter(QuestionTypes.choosing_type))
async def choose_question_type(message: Message, state: FSMContext):
    if message.text not in question_types:
        await message.bot.send_message(chat_id=message.chat.id,
                                       text='–ù–µ–≤—ñ–¥–æ–º–∞ —Ç–µ–º–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É —ñ–∑ –Ω–∞—è–≤–Ω–∏—Ö —Ç–µ–º',
                                       reply_markup=question_type_keyboard)
        return
    await state.update_data(question_type=message.text)
    await state.set_state(QuestionTypes.writing_question)
    await message.bot.send_message(chat_id=message.chat.id,
                                   text='–¢–µ–º—É –æ–±—Ä–∞–Ω–æ! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥—Ä–∞–¥—ñ',
                                   reply_markup=back_to_type_keyboard)


@dp.message(custom_filters.PrivateChat(), StateFilter(QuestionTypes.writing_question))
async def send_question(message: Message, state: FSMContext):
    # TODO: –∫–æ–ª–∏ –±—É–¥–µ–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –ø–æ –≤—Å—ñ–º –≥—É—Ä—Ç–æ–∂–∏—Ç–∫–∞–º, —Ç—É—Ç —Ç—Ä–µ–±–∞ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ —â–æ–± –ø–∏—Å–∞–ª–æ —â–µ –¥–µ –ª—é–¥–∏–Ω–∫–∞ –∂–∏–≤–µ
    if message.text == back_to_types:
        await message.bot.send_message(chat_id=message.chat.id,
                                       text='–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ç–µ–º—É –ø–∏—Ç–∞–Ω–Ω—è',
                                       reply_markup=question_type_keyboard)
        await state.set_state(QuestionTypes.choosing_type)
        return
    state_data = await state.get_data()
    full_text = (f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ —Ç–µ–º—ñ "{state_data["question_type"]}" (—â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —Ä–µ–ø–ª–∞–π–Ω—ñ—Ç—å —Ü–µ '
                 f'–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è):\n\n')
    contacts_string = f'üë§ {message.from_user.full_name}, '
    if message.from_user.username is not None:
        contacts_string += f'—Ç–µ–≥: @{message.from_user.username}, '
    contacts_string += f'#id{message.from_user.id}.'
    if message.text is not None:
        full_text += f'<i>{message.text}\n\n</i>'
    full_text += contacts_string
    await message.bot.send_message(TEST_CHAT_ID, text=full_text)
    if message.text is None:
        await message.copy_to(TEST_CHAT_ID)
    sent_message = await message.bot.send_message(chat_id=message.chat.id,
                                                  text='–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ –¥–æ —Å—Ç—É–¥—Ä–∞–¥–∏ ‚úÖ\n'
                                                       '–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! üì©',
                                                  reply_markup=question_type_keyboard)
    await state.clear()
    await state.set_state(QuestionTypes.choosing_type)


@dp.message(custom_filters.PrivateChat())
async def inform_about_types(message: Message, state: FSMContext):
    if message.text not in question_types:
        await message.bot.send_message(chat_id=message.chat.id,
                                       text='–í –±–æ—Ç—ñ –Ω–∞—è–≤–Ω—ñ —Ç–µ–º–∏ –¥–ª—è –ø–∏—Ç–∞–Ω—å, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, '
                                            '—Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –Ω–∏–∂—á–µ!',
                                       reply_markup=question_type_keyboard)
        await state.set_state(QuestionTypes.choosing_type)
    else:
        await state.update_data(question_type=message.text)
        await state.set_state(QuestionTypes.writing_question)
        await message.bot.send_message(chat_id=message.chat.id,
                                       text='–¢–µ–º—É –æ–±—Ä–∞–Ω–æ! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥—Ä–∞–¥—ñ',
                                       reply_markup=back_to_type_keyboard)


@dp.message(custom_filters.ChatId(TEST_CHAT_ID), custom_filters.ReplyTo(TEST_BOT_ID))
async def send_answer(message: Message):
    replied_message = message.reply_to_message
    user_id = get_user_id_from_message_text(replied_message.html_text)
    if user_id == -1:
        sent_message = await message.reply(text='üòñ –ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—å –∑–Ω–∞–π—Ç–∏, –∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.'
                                                '–†–µ–ø–ª–∞–π–Ω—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '
                                                '(–ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞). '
                                                '–Ø–∫—â–æ –Ω–µ –¥–æ–ø–æ–º–æ–≥–ª–æ, –Ω–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ '
                                                '–∞–±–æ –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –∫–æ–º–∞–Ω–¥–æ—é')
        await asyncio.sleep(15)
        await sent_message.delete()
        return
    reply_text = '‚úÖ –í–∞–º –Ω–∞–¥—ñ–π—à–ª–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è '
    rows = replied_message.text.split('\n')
    rows_count = len(rows)
    is_text_question = rows_count > 2 and rows[2] != ''
    if is_text_question:
        reply_text += '"<i>' + '\n'.join(rows[2:rows_count-2]) + f'</i>":'
    else:
        reply_text += '–±–µ–∑ —Ç–µ–∫—Å—Ç—É:'
    if message.text is not None:
        reply_text += f'\n<b>{message.text}</b>'
    await message.bot.send_message(chat_id=user_id, text=reply_text, reply_markup=question_type_keyboard)
    if message.text is None:
        await message.copy_to(chat_id=user_id)
    sent_message = await message.reply('‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ')
    await asyncio.sleep(10)
    await message.bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)


def get_user_id_from_message_text(html: str) -> int:
    anchor = '#id'
    if html.rfind(anchor) == -1:
        return -1
    user_id_index = html.find(anchor) + len(anchor)
    html = html[user_id_index:]
    end_id_index = html.rfind('.')
    user_id = html[:end_id_index]
    return int(user_id.strip())
